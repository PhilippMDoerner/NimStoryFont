#user http;
worker_processes  1;

load_module /usr/lib/nginx/modules/ngx_http_uploadprogress_module.so;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    upload_progress uploads 1m;
    types_hash_max_size 4096;
    client_max_body_size 21474836481048576;
    client_body_buffer_size 1M;
    disable_symlinks off;

    access_log      /dev/stderr;
    error_log       /dev/stderr;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  600;
    proxy_send_timeout 600;

    # Default: Nginx does not set empty string headers, therefore no header will be set
    # Second regex matches localhost:XXXX
    # This map block tries to match the contents of http_origin against the regexes below. 
    # If a regex matches, the value under $allow_origin is put into the $allow_origin variable.
    map     "$http_origin"                                $allow_origin {
            default                                     '';
            "~^http?:\/\/(.*\.)?{{ domain }}(:\d+)?$"   "$http_origin";
            "~^http?:\/\/(.*\.)?localhost(:\d+)?$"      "$http_origin"; 
    }

    server {
        autoindex off;

        listen 5123 default_server;
        listen [::]:5123 default_server;
        http2 on;  

        rewrite "^\/$" "/wiki2" last;

        root /frontend;
        
        gzip on;
        gzip_vary on;
        gzip_min_length 1000;
        gzip_proxied any;
        gzip_comp_level 9;
        gzip_types text/plain text/css application/json application/javascript application/x-javascript text/javascript text/xml application/xml application/xml+rss;

        # Allows the origin of the request if it matched any of the regular expressions in the block `map $http_origin $allow_origin`
        add_header 'Access-Control-Allow-Origin' $allow_origin; 
        
        # Config stuff
        location /nginx_status {
            # Enable Nginx stats
            stub_status on;
            # Only allow access from your IP e.g 1.1.1.1 or localhost #
            allow 127.0.0.1; #localhost;
            # Other request should be denied
            deny all;
        }

        # Image files
        location /media/ {
            #CORS
            add_header Cache-Control 'public, max-age=604800';  # cache for 1 week

            alias /data/media/image/;
        }

        location /campaign_icons/ {
            #CORS
            add_header Cache-Control 'public, max-age=604800';  # cache for 1 week

            alias /data/media/image/campaign_icons/;
        }

        # Audio Files

        # Target for uploading files triggers the applicationserver on the /file url once upload is done
        location /uploads/ {
            #https://stackoverflow.com/questions/44371643/nginx-php-failing-with-large-file-uploads-over-6-gb/44751210#44751210
            client_body_temp_path      /tmpfiles/;
            client_body_in_file_only   on;

            proxy_pass_request_headers on;
            proxy_set_header           X-File-Name $request_body_file; 
            proxy_set_body             off;
            proxy_redirect             off;
            proxy_pass http://nswebserver:8080/file/; #Hands request over to localhost:8080 where the web-application server is

            track_uploads uploads 30s;
        }

        # Serves audiofiles for streaming
        location /session_audio/ {
            #CORS
            alias /data/media/audio/;
        }

        # Serves audiofiles for download
        location /downloads/ {
            add_header Content-Disposition attachment;

            alias /audiodownloads/;
        }

        location ^~ /progress {
            # report uploads tracked in the 'uploads' zone
            upload_progress_json_output;
            report_uploads uploads;
        }
        
        location /wiki1/api/db_dumps/ {

            # Serves files from /db_dumps/ but checks for authentication first
            auth_request /auth ;
            add_header Cache-Control 'public, max-age=21600';  # cache for 6h
            alias /data/db_dumps/;
        }
        
        # Authentication check for files
        location = /auth {
            internal;
            proxy_redirect off;
            proxy_pass_request_headers on;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_pass http://nswebserver:8080/token/validate/;
        }


        # Passes requests on to the application server "nimstoryfont"
        location /wiki1/api {
            rewrite ^/wiki1/api/(.*) /$1  break; #Removes "/wiki1/api" from the url for the web-application-server
            
            add_header Access-Control-Allow-Credentials true;

            proxy_pass http://nswebserver:8080; #Hands request over to localhost:8080 where the web-application server is
            proxy_set_header Host $host;
            proxy_send_timeout          300s;
            proxy_connect_timeout       300s;
            proxy_read_timeout          300s;
            send_timeout                300s;
            proxy_set_header X-Real_IP $remote_addr;
        }
        
        # Serves the frontend which is an angular application        
        location /wiki2 {
            if ($request_filename ~* ".html$") {
                add_header Link '<http://{{ domain }}>; rel="preconnect"';
            }
            # CORS
            # Cache headers
            add_header Cache-Control 'public, max-age=86400';  # cache for 1 day
            try_files /index.html =404;
        }
        #error_page  404              /404.html;
        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
}