{"version":3,"file":"cli.js","sourceRoot":"","sources":["../src/cli/cli.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport yargs from 'yargs';\nimport fs from 'fs';\nimport temp from 'temp';\nimport open from 'open';\nimport chalk from 'chalk';\nimport { groupBy, isString } from 'lodash';\n\nimport { explore } from '../lib/api';\nimport { AppError, getErrorMessage } from '../lib/app-error';\n\nimport type { ErrorContext } from '../lib/app-error';\nimport type { ExploreOptions, ReplaceMap, ExploreResult } from '../lib/types';\n\n/** Parsed CLI arguments */\ninterface Arguments {\n  _: string[];\n  json?: string;\n  tsv?: string;\n  html?: string;\n  onlyMapped?: boolean;\n  excludeSourceMap?: boolean;\n  noRoot?: boolean;\n  replace?: string[];\n  with?: string[];\n  noBorderChecks?: boolean;\n  coverage?: string;\n  gzip?: boolean;\n  sort?: boolean;\n}\n\nfunction parseArguments(): Arguments {\n  const argv = yargs\n    .strict()\n    .scriptName('source-map-explorer')\n    .usage('Analyze and debug space usage through source maps.')\n    .usage('Usage:')\n    .usage(\n      '$0 script.js [script.js.map] [--json [result.json] | --html [result.html] | --tsv [result.csv]] [-m | --only-mapped] [--exclude-source-map] [--no-border-checks] [--gzip] [--sort] [--replace=BEFORE_1 BEFORE_2 --with=AFTER_1 AFTER_2] [--no-root] [--coverage coverage.json] [--version] [--help | -h]'\n    )\n    .example('$0 script.js script.js.map', 'Explore bundle')\n    .example('$0 script.js', 'Explore bundle with inline source map')\n    .example('$0 dist/js/*.*', 'Explore all bundles inside dist/js folder')\n    .example('$0 script.js --tsv', 'Explore and output result as TSV to stdout')\n    .example('$0 script.js --json result.json', 'Explore and save result as JSON to the file')\n    .demandCommand(1, 'At least one js file must be specified')\n    .options({\n      json: {\n        type: 'string',\n        description:\n          'If filename specified save output as JSON to specified file otherwise output to stdout.',\n        conflicts: ['tsv', 'html'],\n      },\n      tsv: {\n        type: 'string',\n        description:\n          'If filename specified save output as TSV to specified file otherwise output to stdout.',\n        conflicts: ['json', 'html'],\n      },\n      html: {\n        type: 'string',\n        description:\n          'If filename specified save output as HTML to specified file otherwise output to stdout rather than opening a browser.',\n        conflicts: ['json', 'tsv'],\n      },\n\n      'only-mapped': {\n        alias: 'm',\n        type: 'boolean',\n        description:\n          'Exclude \"unmapped\" bytes from the output. This will result in total counts less than the file size',\n      },\n\n      'exclude-source-map': {\n        type: 'boolean',\n        description: 'Exclude source map comment size from output',\n      },\n\n      'no-root': {\n        type: 'boolean',\n        description:\n          'To simplify the visualization, source-map-explorer will remove any prefix shared by all sources. If you wish to disable this behavior, set --no-root.',\n      },\n\n      replace: {\n        type: 'string',\n        array: true,\n        description:\n          'Apply a simple find/replace on source file names. This can be used to fix some oddities with paths that appear in the source map generation process. Accepts regular expressions.',\n        implies: 'with',\n      },\n      with: {\n        type: 'string',\n        array: true,\n        description: 'See --replace.',\n        implies: 'replace',\n      },\n\n      'no-border-checks': {\n        type: 'boolean',\n        description: 'Disable invalid mapping column/line checks.',\n      },\n\n      coverage: {\n        type: 'string',\n        normalize: true,\n        description:\n          'If the path to a valid a chrome code coverage JSON export is supplied, the tree map will be colorized according to which percentage of the modules code was executed',\n      },\n\n      gzip: {\n        type: 'boolean',\n        description: 'Calculate gzip size. It also sets onlyMapped flag',\n        conflicts: ['only-mapped'],\n      },\n\n      sort: {\n        type: 'boolean',\n        description: 'Sort filenames',\n      },\n    })\n    .group(['json', 'tsv', 'html'], 'Output:')\n    .group(['replace', 'with'], 'Replace:')\n    .help('h')\n    .alias('h', 'help')\n    .showHelpOnFail(false, 'Specify --help for available options')\n    .wrap(null) // Do not limit line length\n    .parserConfiguration({\n      'boolean-negation': false, // Allow --no-root\n    })\n    .check((argv) => {\n      if (argv.replace && argv.with && argv.replace.length !== argv.with.length) {\n        throw new Error('--replace flags must be paired with --with flags');\n      }\n\n      return true;\n    })\n    .parse();\n\n  // Trim extra quotes\n  const quoteRegex = /'/g;\n\n  return {\n    ...argv,\n    _: argv._.filter((arg): arg is string => typeof arg === 'string').map((path) =>\n      path.replace(quoteRegex, '')\n    ),\n  };\n}\n\nexport function logError(message: string | ErrorContext, error?: Error): void {\n  if (!isString(message)) {\n    message = getErrorMessage(message);\n  }\n\n  if (error) {\n    console.error(chalk.red(message), error);\n  } else {\n    console.error(chalk.red(message));\n  }\n}\n\nexport function logWarn(message: string): void {\n  console.warn(chalk.yellow(message));\n}\n\nexport function logInfo(message: string): void {\n  console.log(chalk.green(message));\n}\n\n/**\n * Create options object for `explore` method\n */\nfunction getExploreOptions(argv: Arguments): ExploreOptions {\n  const {\n    json,\n    tsv,\n    html,\n    replace: replaceItems,\n    with: withItems,\n    onlyMapped,\n    excludeSourceMap: excludeSourceMapComment,\n    noRoot,\n    noBorderChecks,\n    coverage,\n    gzip,\n    sort,\n  } = argv;\n\n  let replaceMap: ReplaceMap | undefined;\n\n  if (replaceItems && withItems) {\n    replaceMap = replaceItems.reduce<ReplaceMap>((result, item, index) => {\n      result[item] = withItems[index];\n\n      return result;\n    }, {});\n  }\n\n  return {\n    output: {\n      // By default CLI needs result in HTML in order to create a temporary file\n      format: isString(json) ? 'json' : isString(tsv) ? 'tsv' : 'html',\n      filename: json || tsv || html,\n    },\n    replaceMap,\n    onlyMapped,\n    excludeSourceMapComment,\n    noRoot,\n    noBorderChecks,\n    coverage,\n    gzip,\n    sort,\n  };\n}\n\n/**\n * Write HTML content to a temporary file and open the file in a browser\n */\nasync function writeHtmlToTempFile(html?: string): Promise<void> {\n  if (!html) {\n    return;\n  }\n\n  try {\n    const tempFile = temp.path({ prefix: 'sme-result-', suffix: '.html' });\n\n    fs.writeFileSync(tempFile, html);\n\n    const childProcess = await open(tempFile);\n\n    if (childProcess.stderr) {\n      // Catch error output from child process\n      childProcess.stderr.once('data', (error: Buffer) => {\n        // TODO: Figure out why `#< CLIXML` ends up in stderr. Maybe we should simply ignore it\n        if (error.toString().trim() !== '#< CLIXML') {\n          logError({ code: 'CannotOpenTempFile', tempFile, error });\n        }\n      });\n    }\n  } catch (error) {\n    throw new AppError({ code: 'CannotCreateTempFile' }, error);\n  }\n}\n\nfunction outputErrors({ errors }: ExploreResult): void {\n  if (errors.length === 0) {\n    return;\n  }\n\n  // Group errors by bundle name\n  const groupedErrors = groupBy(errors, 'bundleName');\n\n  Object.entries(groupedErrors).forEach(([bundleName, errors]) => {\n    console.group(bundleName);\n\n    const hasManyErrors = errors.length > 1;\n\n    errors.forEach((error, index) => {\n      const message = `${hasManyErrors ? `${index + 1}. ` : ''}${error.message}`;\n\n      if (error.isWarning) {\n        logWarn(message);\n      } else {\n        logError(message);\n      }\n    });\n\n    console.groupEnd();\n  });\n}\n\nif (require.main === module) {\n  const argv = parseArguments();\n\n  const isOutputFormatSpecified = [argv.json, argv.tsv, argv.html].some(isString);\n\n  const options = getExploreOptions(argv);\n\n  explore(argv._, options)\n    .then((result) => {\n      if (isOutputFormatSpecified && options.output) {\n        const filename = options.output.filename;\n\n        if (filename) {\n          logInfo(`Output saved to ${filename}`);\n          outputErrors(result);\n        } else {\n          console.log(result.output);\n        }\n      } else {\n        writeHtmlToTempFile(result.output).then(() => {\n          outputErrors(result);\n        });\n      }\n    })\n    .catch((error) => {\n      if (error.errors) {\n        outputErrors(error);\n      } else {\n        logError('Failed to explore', error);\n      }\n\n      process.exitCode = 1;\n    });\n}\n"]}