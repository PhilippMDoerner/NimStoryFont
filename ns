#!/bin/bash
# Note: This script defines "cmds" for autocompletes, but I can not be bothered to implement that.

load_env() {
  # Load the .env file if it exists. Does not do this for the local init command as that one means
  # there is no .env file yet.
  if [[ "$1" == "local" && "$2" == "init" ]]; then
    return
  fi
  set -a && source .env && set +a
}


## HELP COMMANDS
# TODO: Add dry-run, help and verbose options
global_help_command(){
  cat <<EOF
Usage:
  ./ns <group> <command> [options]

Groups:
  local   Manage local project setup and configuration
  host      Manage the remote host machine
  server    Control the remote server
  db        Manage the remote database

Commands:

Local Commands:
  init                       RUN FIRST AFTER CLONING. Initialize the project locally, creating required local configs for other commands.
  regen-configs              Regenerate local generated config files from your .env file
  dev enable                 Enable local development mode (update /etc/hosts to point localhost to your domain)
  dev disable                Disable local development mode (restore /etc/hosts to default)

Host Commands:
  bootstrap                  Bootstrap the host (SSH configs, firewall, basic setup)
  setup                      Setup the host with additional config files
  ssh                        SSH into the remote host machine

Server Commands:
  start                      Start the server on the host machine
  stop                       Stop the server on the host machine
  status                     Get the status of the server on the host machine
  restart                    Restart the server on the host machine

Database Commands:
  init                        Creates an empty database file with the current schema 
  download                    Download the database from the host machine
  upload                      Upload the database to the host machine
  migrate                     Migrate the database to a new schema

Examples:
  ./ns local init
  ./ns host bootstrap user@host.com
  ./ns server restart user@host.com
  ./ns db migrate user@host.com
  ./ns local dev enable
EOF
}

local_help_command(){
  cat <<EOF
Usage:
  ./ns local <command>

Commands:
  init                       RUN FIRST AFTER CLONING. Initialize the project locally, creating required local configs for other commands.
  regen-configs              Regenerate local generated config files from your .env file
  dev enable                 Enable local development mode (update /etc/hosts to point localhost to your domain)
  dev disable                Disable local development mode (restore /etc/hosts to default)

Description:
  Commands to set up and maintain the local project environment.
EOF
}

host_help_command(){
  cat <<EOF
Usage:
  ./ns host <command> 

Commands:
  ssh                     SSH into the remote host machine
  bootstrap               Bootstrap the host (add an ansible user, set up SSH configs, firewall, etc.)
  setup                   Setup the host by copying configuration files

Description:
  Commands to prepare and interact with the remote host machine.
EOF
}

server_help_command(){
  cat <<EOF
Usage:
  ./ns server <command> 

Commands:
  start                   Start the server process on the host machine
  stop                    Stop the server process on the host machine
  status                  Get the status of the server process on the host machine
  restart                 Restart the server process on the host machine

Description:
  Commands to control the server runtime on the remote host.
EOF
}

db_help_command(){
  cat <<EOF
Usage:
  ./ns db <command> 

Commands:
  download                Download the database from the host machine
  migrate                 Migrate the database to a new schema version

Description:
  Commands to manage the database on the remote host.
EOF
}

## BACKEND_DISPATCHERS
run_ansible_playbook() {
  echo ansible-playbook -v ./ansible/"$1".yml --ask-become-pass 
  if ansible-playbook -v ./ansible/"$1".yml --ask-become-pass; then
    return 0
  else
    exit 1
  fi
}

run_compose(){
  echo sudo docker compose -f ./$1.yml --env-file ./local.env "${@:2}"
  if sudo docker compose -f ./$1.yml --env-file ./local.env "${@:2}"; then
    return 0
  else
    exit 1
  fi
}

## FRONTEND_DISPATCHERS
local_command(){
  case $2 in
    init) 
      run_ansible_playbook init
      load_env local setup
      run_ansible_playbook setup_local
      ./ns db init
    ;;
    regen-configs) run_ansible_playbook regenerate;;
    dev)
      case $3 in
        enable) run_ansible_playbook enabledev;;
        disable) run_ansible_playbook disabledev ;;
        cmds) echo enable disable cmds help;;
        help|*) local_help_command ;;
      esac
    ;;
    clear)
      rm -r ./local_only ./.env ./host.env ./local.env ./nimstoryfont_ansible ./nimstoryfont_ansible.pub ./inventory ./provision_user.sh
    ;;
    compose) 
      set -a && source local.env && set +a
      run_compose docker-compose_new "${@:3}"
    ;;
    cmds) echo init regen-configs dev clear cmds help;;
    help|*) local_help_command ;;
  esac
}

host_command(){
  case $2 in
    ssh) ssh -i nimstoryfont_ansible ansible@$HOST_IP;;
    bootstrap) 
      bash ./provision_user.sh
      run_ansible_playbook bootstrap_server
    ;;
    setup) run_ansible_playbook setup_server ;;
    cmds) echo ssh bootstrap setup cmds help;;
    help|*) host_help_command ;;
  esac;
}

server_command(){
  case $2 in
    start) run_ansible_playbook start_ns;;
    stop) run_ansible_playbook stop_ns;;
    restart) run_ansible_playbook restart_ns ;;
    status) echo "Not implemented yet" ;;
    cmds) echo start stop restart status cmds help;;
    help|*) server_help_command ;;
  esac
}

db_command(){
  case $2 in
    init) touch $LOCAL_VOLUME_PATH/database/db.sqlite3 && ./ns db migrate local;;
    download) run_ansible_playbook download_db ;;
    upload) echo "Not implemented yet" ;;
    migrate) 
      case $3 in
        local) flyway -url="jdbc:sqlite:$LOCAL_VOLUME_PATH/database/db.sqlite3" -locations=filesystem:./backend/sql migrate;;
        host) run_ansible_playbook migrate_db;;
        cmds) echo local host cmds help;;
        help|*) db_help_command ;;
      esac
    ;;
    cmds) echo init download upload migrate cmds help;;
    help|*) db_help_command ;;
  esac
}


## MAIN#
load_env "$@"

case $1 in
  local) local_command "$@" ;;
  host) host_command "$@" ;;
  server) server_command "$@" ;;
  db) db_command "$@" ;;
  autocomplete) source ./autocomplete.sh ;;
  cmds) echo local host server db autocomplete commands help;;
  help|*) global_help_command ;;
esac

exit 0