#!/bin/bash
# Note: This script defines "cmds" for autocompletes, but I can not be bothered to implement that.

load_env() {
  # Load the .env file if it exists. Does not do this for the local init command as that one means
  # there is no .env file yet.
  if [[ "$1" == "local" && "$2" == "init" ]]; then
    return
  fi
  set -a && source .env && set +a
}


## HELP COMMANDS
# TODO: Add dry-run, help and verbose options
global_help_command(){
  cat <<EOF
Usage:
  ./ns <group> <command> [options]

Groups:
  local   Manage local project setup and configuration
  host      Manage the remote host machine
  server    Control the remote server
  db        Manage the remote database

Commands:

Local Commands:
  init                       RUN FIRST AFTER CLONING. Initialize the project locally, creating required local configs for other commands.
  regen                      Regenerate local generated config files from your .env file
  proxy start                Start a proxy server for local development. Uses local.caddyfile + local.env
  proxy stop                 Stop a proxy server for local development
  proxy reload               Reload the configs when changes to local.env or local.caddyfile were made
  proxy validate             Validate that the current combination of local.env + local.caddyfile work
  dev enable                 Enable local development mode (update /etc/hosts to make your machine reroute requests your domain to localhost)
  dev disable                Disable local development mode (restore /etc/hosts to default)
  clear                      Clear all local generated config files
  compose <cmd>              Run docker compose commands with the local setup
  
Host Commands:
  bootstrap                  Bootstrap the host (SSH configs, firewall, basic setup)
  setup                      Setup the host with additional config files
  ssh                        SSH into the remote host machine
  proxy start                Start a proxy server on the remote host machine. Uses host.caddyfile + host.env
  proxy stop                 Stop a proxy server on the remote host machine
  proxy reload               Reload the configs when changes to host.env or host.caddyfile were made
  proxy validate             Validate that the current combination of host.env + host.caddyfile work

Server Commands:
  compose <cmd>              Run docker compose commands with the server-setup on the host machine.

Database Commands:
  init                        Creates an empty database file with the current schema 
  download                    Download the database from the host machine
  upload                      Upload the database to the host machine
  migrate                     Migrate the database to a new schema
  connect local               Opens the local sqlite3 database file in the terminal
  connect host                Opens the sqlite3 database file on the host machine in the terminal

Examples:
  ./ns local init
  ./ns host bootstrap
  ./ns server compose up
  ./ns db migrate local
  ./ns local dev enable
EOF
}

local_help_command(){
  cat <<EOF
Usage:
  ./ns local <command>

Commands:
  init                       RUN FIRST AFTER CLONING. Initialize the project locally, creating required local configs for other commands.
  regen                      Regenerate local generated config files from your .env file
  proxy start                Start a proxy server for local development. Uses local.caddyfile + local.env
  proxy stop                 Stop a proxy server for local development
  proxy reload               Reload the configs when changes to local.env or local.caddyfile were made
  proxy validate             Validate that the current combination of local.env + local.caddyfile work
  dev enable                 Enable local development mode (update /etc/hosts to make your machine reroute requests your domain to localhost)
  dev disable                Disable local development mode (restore /etc/hosts to default)
  clear                      Clear all local generated config files
  compose <cmd>              Run docker compose commands with the local setup
  
Description:
  Commands to set up, use and maintain the local project environment.
EOF
}

host_help_command(){
  cat <<EOF
Usage:
  ./ns host <command> 

Commands:
  bootstrap                  Bootstrap the host (SSH configs, firewall, basic setup)
  setup                      Setup the host with additional config files
  ssh                        SSH into the remote host machine
  proxy start                Start a proxy server on the remote host machine. Uses host.caddyfile + host.env
  proxy stop                 Stop a proxy server on the remote host machine
  proxy reload               Reload the configs when changes to host.env or host.caddyfile were made
  proxy validate             Validate that the current combination of host.env + host.caddyfile work

Description:
  Commands to prepare and interact with the remote host machine.
EOF
}

server_help_command(){
  cat <<EOF
Usage:
  ./ns server <command> 

Commands:
  compose <cmd>              Run docker compose commands with the server-setup on the host machine.

Description:
  Commands to control the server runtime on the remote host.
EOF
}

db_help_command(){
  cat <<EOF
Usage:
  ./ns db <command> 

Commands:
  init                        Creates an empty database file with the current schema 
  download                    Download the database from the host machine
  upload                      Upload the database to the host machine
  migrate                     Migrate the database to a new schema
  connect local               Opens the local sqlite3 database file in the terminal
  connect host                Opens the sqlite3 database file on the host machine in the terminal

Description:
  Commands to manage the database on the remote host.
EOF
}

## BACKEND_DISPATCHERS
run_ansible_playbook() {
  echo ansible-playbook -v ./ansible/"$1".yml --ask-become-pass 
  if ansible-playbook -v ./ansible/"$1".yml --ask-become-pass; then
    return 0
  else
    exit 1
  fi
}

run_compose(){
  echo sudo docker compose -f ./$1.yml --env-file ./local.env "${@:2}"
  if sudo docker compose -f ./$1.yml --env-file ./local.env "${@:2}"; then
    return 0
  else
    exit 1
  fi
}

run_on_host(){
  echo "$1"
  ssh -t -i nimstoryfont_ansible ansible@$HOST_IP "$1"
}

## FRONTEND_DISPATCHERS
local_command(){
  case $2 in
    init) 
      run_ansible_playbook init
      load_env local setup
      run_ansible_playbook setup_local
      ./ns db init
    ;;
    regen) run_ansible_playbook regenerate;;
    proxy)
      case $3 in
        start) 
          cmd="sudo caddy run --envfile $LOCAL_PROJECT_ROOT/local.env --config $LOCAL_PROJECT_ROOT/local.caddyfile"
          echo "$cmd"
          eval "$cmd"
        ;;
        stop) 
          cmd="sudo caddy stop"
          echo "$cmd"
          eval "$cmd"
        ;;
        reload)
          cmd="sudo caddy reload --config $LOCAL_PROJECT_ROOT/local.caddyfile"
          echo "$cmd"
          eval "$cmd"
        ;;
        validate)
          cmd="sudo caddy validate --envfile $LOCAL_PROJECT_ROOT/local.env --config $LOCAL_PROJECT_ROOT/local.caddyfile"
          echo "$cmd - $NS_DOMAIN - $VOLUME_DIR" 
          eval "$cmd"
        ;;
        cmds) echo start stop reload validate cmds help;;
        help|*) local_help_command ;;
      esac
    ;;
    dev)
      case $3 in
        enable)
          run_ansible_playbook enable_dev
        ;;
        disable)
          run_ansible_playbook disable_dev
        ;;
        cmds) echo start stop cmds help;;
        help|*) local_help_command ;;
      esac
    ;;
    clear)
      rm -r ./ansible.cfg ./local_only ./.env ./host.env ./local.env ./nimstoryfont_ansible ./nimstoryfont_ansible.pub ./inventory ./provision_user.sh
    ;;
    compose) 
      set -a && source local.env && set +a
      run_compose ./docker-compose_new "${@:3}"
    ;;
    cmds) echo init regen proxy dev clear cmds help;;
    help|*) local_help_command ;;
  esac
}

host_command(){
  case $2 in
    ssh) ssh -i nimstoryfont_ansible ansible@$HOST_IP;;
    proxy)
      case $3 in
        start)
          local cmd="sudo caddy start --envfile $HOST_PROJECT_ROOT/host.env --config $HOST_PROJECT_ROOT/host.caddyfile"
          run_on_host "$cmd"
        ;;
        stop)
          local cmd="sudo caddy stop"
          run_on_host "$cmd"
        ;;
        reload)
          local cmd="sudo caddy reload --config $HOST_PROJECT_ROOT/host.caddyfile"
          run_on_host "$cmd"
        ;;
        validate)
          local cmd="sudo caddy validate --envfile $HOST_PROJECT_ROOT/host.env --config $HOST_PROJECT_ROOT/host.caddyfile"
          run_on_host "$cmd"
        ;;
        cmds) echo start stop reload validate cmds help;;
        help|*) host_help_command ;;
      esac
    ;;
    bootstrap) 
      bash ./provision_user.sh
      run_ansible_playbook bootstrap_server
    ;;
    setup) run_ansible_playbook setup_server ;;
    cmds) echo ssh proxy bootstrap setup cmds help;;
    help|*) host_help_command ;;
  esac;
}

server_command(){
  case $2 in
    compose)
      set -a && source host.env && source .env && set +a
      local cmd="sudo docker compose -f $HOST_COMPOSE_PATH --env-file $HOST_PROJECT_ROOT/host.env ${@:3}"
      run_on_host "$cmd"
    ;;
    cmds) echo compose cmds help;;
    help|*) server_help_command ;;
  esac
}

db_command(){
  case $2 in
    init) touch $LOCAL_VOLUME_PATH/database/db.sqlite3 && ./ns db migrate local;;
    download) run_ansible_playbook download_db ;;
    upload) echo "Not implemented yet" ;;
    migrate) 
      case $3 in
        local) flyway -url="jdbc:sqlite:$LOCAL_VOLUME_PATH/database/db.sqlite3" -locations=filesystem:./backend/sql migrate;;
        host) run_ansible_playbook migrate_db;;
        cmds) echo local host cmds help;;
        help|*) db_help_command ;;
      esac
    ;;
    connect)
      case $3 in
        local) sqlite3 $LOCAL_VOLUME_PATH/database/db.sqlite3;;
        host)
          local cmd="sqlite3 $HOST_VOLUME_PATH/database/db.sqlite3"
          run_on_host "$cmd"
        ;;
        cmds) echo local host cmds help;;
        help|*) db_help_command ;;
      esac
    ;;
    cmds) echo init download upload migrate cmds help;;
    help|*) db_help_command ;;
  esac
}


## MAIN#
load_env "$@"

case $1 in
  local) local_command "$@" ;;
  host) host_command "$@" ;;
  server) server_command "$@" ;;
  db) db_command "$@" ;;
  autocomplete) source ./autocomplete.sh ;;
  cmds) echo local host server db autocomplete commands help;;
  help|*) global_help_command ;;
esac

exit 0