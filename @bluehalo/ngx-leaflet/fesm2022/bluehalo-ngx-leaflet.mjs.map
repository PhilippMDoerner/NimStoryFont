{"version":3,"file":"bluehalo-ngx-leaflet.mjs","sources":["../../../projects/ngx-leaflet/src/lib/core/leaflet.util.ts","../../../projects/ngx-leaflet/src/lib/core/leaflet.directive.ts","../../../projects/ngx-leaflet/src/lib/core/leaflet.directive.wrapper.ts","../../../projects/ngx-leaflet/src/lib/layers/leaflet-layer.directive.ts","../../../projects/ngx-leaflet/src/lib/layers/leaflet-layers.directive.ts","../../../projects/ngx-leaflet/src/lib/layers/control/leaflet-control-layers-changes.model.ts","../../../projects/ngx-leaflet/src/lib/layers/control/leaflet-control-layers.wrapper.ts","../../../projects/ngx-leaflet/src/lib/layers/control/leaflet-control-layers-config.model.ts","../../../projects/ngx-leaflet/src/lib/layers/control/leaflet-control-layers.directive.ts","../../../projects/ngx-leaflet/src/lib/layers/base/leaflet-baselayers.directive.ts","../../../projects/ngx-leaflet/src/lib/leaflet.module.ts","../../../projects/ngx-leaflet/src/lib/layers/leaflet-tile-layer-definition.model.ts","../../../projects/ngx-leaflet/src/bluehalo-ngx-leaflet.ts"],"sourcesContent":["import { EventEmitter, NgZone } from '@angular/core';\n\nexport class LeafletUtil {\n\n    static mapToArray<T>(map: { [ key: string ]: T }): T[] {\n        const toReturn: T[] = [];\n\n        for (const k in map) {\n            if (map.hasOwnProperty(k)) {\n                toReturn.push(map[k]);\n            }\n        }\n\n        return toReturn;\n    }\n\n    static handleEvent<T>(zone: NgZone, eventEmitter: EventEmitter<T>, event: T) {\n\n        // Don't want to emit if there are no observers\n        if (0 < eventEmitter.observers.length) {\n            zone.run(() => {\n                eventEmitter.emit(event);\n            });\n        }\n\n    }\n}\n","import {\n    Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnChanges, OnDestroy, OnInit, Output,\n    SimpleChange\n} from '@angular/core';\n\nimport { latLng, LatLng, LatLngBounds, LeafletEvent, LeafletMouseEvent, map, Map, MapOptions } from 'leaflet';\n\nimport { LeafletUtil } from './leaflet.util';\n\n@Directive({\n    selector: '[leaflet]',\n    standalone: false\n})\nexport class LeafletDirective\n    implements OnChanges, OnDestroy, OnInit {\n\n    readonly DEFAULT_ZOOM = 1;\n    readonly DEFAULT_CENTER = latLng(38.907192, -77.036871);\n    readonly DEFAULT_FPZ_OPTIONS = {};\n\n    resizeTimer: any;\n\n    // Reference to the primary map object\n    map: Map;\n\n    @Input('leafletFitBoundsOptions') fitBoundsOptions = this.DEFAULT_FPZ_OPTIONS;\n    @Input('leafletPanOptions') panOptions = this.DEFAULT_FPZ_OPTIONS;\n    @Input('leafletZoomOptions') zoomOptions = this.DEFAULT_FPZ_OPTIONS;\n    @Input('leafletZoomPanOptions') zoomPanOptions = this.DEFAULT_FPZ_OPTIONS;\n\n\n    // Default configuration\n    @Input('leafletOptions') options: MapOptions = {};\n\n    // Configure callback function for the map\n    @Output('leafletMapReady') mapReady = new EventEmitter<Map>();\n\n    // Zoom level for the map\n    @Input('leafletZoom') zoom: number;\n    @Output('leafletZoomChange') zoomChange = new EventEmitter<number>();\n\n    // Center of the map\n    @Input('leafletCenter') center: LatLng;\n    @Output('leafletCenterChange') centerChange = new EventEmitter<LatLng>();\n\n    // Set fit bounds for map\n    @Input('leafletFitBounds') fitBounds: LatLngBounds;\n\n    // Set the max bounds for the map\n    @Input('leafletMaxBounds') maxBounds: LatLngBounds;\n\n    // Set the min zoom for the map\n    @Input('leafletMinZoom') minZoom: number;\n\n    // Set the max zoom for the map\n    @Input('leafletMaxZoom') maxZoom: number;\n\n\n    // Mouse Map Events\n    @Output('leafletClick') onClick = new EventEmitter<LeafletMouseEvent>();\n    @Output('leafletDoubleClick') onDoubleClick = new EventEmitter<LeafletMouseEvent>();\n    @Output('leafletMouseDown') onMouseDown = new EventEmitter<LeafletMouseEvent>();\n    @Output('leafletMouseUp') onMouseUp = new EventEmitter<LeafletMouseEvent>();\n    @Output('leafletMouseMove') onMouseMove = new EventEmitter<LeafletMouseEvent>();\n    @Output('leafletMouseOver') onMouseOver = new EventEmitter<LeafletMouseEvent>();\n    @Output('leafletMouseOut') onMouseOut = new EventEmitter<LeafletMouseEvent>();\n\n    // Map Move Events\n    @Output('leafletMapMove') onMapMove = new EventEmitter<LeafletEvent>();\n    @Output('leafletMapMoveStart') onMapMoveStart = new EventEmitter<LeafletEvent>();\n    @Output('leafletMapMoveEnd') onMapMoveEnd = new EventEmitter<LeafletEvent>();\n\n    // Map Zoom Events\n    @Output('leafletMapZoom') onMapZoom = new EventEmitter<LeafletEvent>();\n    @Output('leafletMapZoomStart') onMapZoomStart = new EventEmitter<LeafletEvent>();\n    @Output('leafletMapZoomEnd') onMapZoomEnd = new EventEmitter<LeafletEvent>();\n\n    constructor(private element: ElementRef, private zone: NgZone) {\n        // Nothing here\n    }\n\n    ngOnInit() {\n\n        // Create the map outside of angular so the various map events don't trigger change detection\n        this.zone.runOutsideAngular(() => {\n\n            // Create the map with some reasonable defaults\n            this.map = map(this.element.nativeElement, this.options);\n            this.addMapEventListeners();\n\n        });\n\n        // Only setView if there is a center/zoom\n        if (null != this.center && null != this.zoom) {\n            this.setView(this.center, this.zoom);\n        }\n\n        // Set up all the initial settings\n        if (null != this.fitBounds) {\n            this.setFitBounds(this.fitBounds);\n        }\n\n        if (null != this.maxBounds) {\n            this.setMaxBounds(this.maxBounds);\n        }\n\n        if (null != this.minZoom) {\n            this.setMinZoom(this.minZoom);\n        }\n\n        if (null != this.maxZoom) {\n            this.setMaxZoom(this.maxZoom);\n        }\n\n        this.doResize();\n\n        // Fire map ready event\n        this.mapReady.emit(this.map);\n\n    }\n\n    ngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n        /*\n         * The following code is to address an issue with our (basic) implementation of\n         * zooming and panning. From our testing, it seems that a pan operation followed\n         * by a zoom operation in the same thread will interfere with eachother. The zoom\n         * operation interrupts/cancels the pan, resulting in a final center point that is\n         * inaccurate. The solution seems to be to either separate them with a timeout or\n          * to collapse them into a setView call.\n         */\n\n        // Zooming and Panning\n        if (changes['zoom'] && changes['center'] && null != this.zoom && null != this.center) {\n            this.setView(changes['center'].currentValue, changes['zoom'].currentValue);\n        }\n        // Set the zoom level\n        else if (changes['zoom']) {\n            this.setZoom(changes['zoom'].currentValue);\n        }\n        // Set the map center\n        else if (changes['center']) {\n            this.setCenter(changes['center'].currentValue);\n        }\n\n        // Other options\n        if (changes['fitBounds']) {\n            this.setFitBounds(changes['fitBounds'].currentValue);\n        }\n\n        if (changes['maxBounds']) {\n            this.setMaxBounds(changes['maxBounds'].currentValue);\n        }\n\n        if (changes['minZoom']) {\n            this.setMinZoom(changes['minZoom'].currentValue);\n        }\n\n        if (changes['maxZoom']) {\n            this.setMaxZoom(changes['maxZoom'].currentValue);\n        }\n\n    }\n\n    ngOnDestroy() {\n        // If this directive is destroyed, the map is too\n        if (null != this.map) {\n            this.map.remove();\n        }\n    }\n\n    public getMap() {\n        return this.map;\n    }\n\n\n    @HostListener('window:resize', [])\n    onResize() {\n        this.delayResize();\n    }\n\n    private addMapEventListeners() {\n\n        const registerEventHandler = (eventName: string, handler: (e: LeafletEvent) => any) => {\n            this.map.on(eventName, handler);\n        };\n\n\n        // Add all the pass-through mouse event handlers\n        registerEventHandler('click', (e: LeafletMouseEvent) => LeafletUtil.handleEvent(this.zone, this.onClick, e));\n        registerEventHandler('dblclick', (e: LeafletMouseEvent) => LeafletUtil.handleEvent(this.zone, this.onDoubleClick, e));\n        registerEventHandler('mousedown', (e: LeafletMouseEvent) => LeafletUtil.handleEvent(this.zone, this.onMouseDown, e));\n        registerEventHandler('mouseup', (e: LeafletMouseEvent) => LeafletUtil.handleEvent(this.zone, this.onMouseUp, e));\n        registerEventHandler('mouseover', (e: LeafletMouseEvent) => LeafletUtil.handleEvent(this.zone, this.onMouseOver, e));\n        registerEventHandler('mouseout', (e: LeafletMouseEvent) => LeafletUtil.handleEvent(this.zone, this.onMouseOut, e));\n        registerEventHandler('mousemove', (e: LeafletMouseEvent) => LeafletUtil.handleEvent(this.zone, this.onMouseMove, e));\n\n        registerEventHandler('zoomstart', (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onMapZoomStart, e));\n        registerEventHandler('zoom', (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onMapZoom, e));\n        registerEventHandler('zoomend', (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onMapZoomEnd, e));\n        registerEventHandler('movestart', (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onMapMoveStart, e));\n        registerEventHandler('move', (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onMapMove, e));\n        registerEventHandler('moveend', (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onMapMoveEnd, e));\n\n\n        // Update any things for which we provide output bindings\n        const outputUpdateHandler = () => {\n            const zoom = this.map.getZoom();\n            if (zoom !== this.zoom) {\n                this.zoom = zoom;\n                LeafletUtil.handleEvent(this.zone, this.zoomChange, zoom);\n            }\n\n            const center = this.map.getCenter();\n            if (null != center || null != this.center) {\n\n                if (((null == center || null == this.center) && center !== this.center)\n                    || (center.lat !== this.center.lat || center.lng !== this.center.lng)) {\n\n                    this.center = center;\n                    LeafletUtil.handleEvent(this.zone, this.centerChange, center);\n\n                }\n            }\n        };\n\n        registerEventHandler('moveend', outputUpdateHandler);\n        registerEventHandler('zoomend', outputUpdateHandler);\n    }\n\n    /**\n     * Resize the map to fit it's parent container\n     */\n    private doResize() {\n\n        // Run this outside of angular so the map events stay outside of angular\n        this.zone.runOutsideAngular(() => {\n\n            // Invalidate the map size to trigger it to update itself\n            if (null != this.map) {\n                this.map.invalidateSize({});\n            }\n\n        });\n\n    }\n\n    /**\n     * Manage a delayed resize of the component\n     */\n    private delayResize() {\n        if (null != this.resizeTimer) {\n            clearTimeout(this.resizeTimer);\n        }\n        this.resizeTimer = setTimeout(this.doResize.bind(this), 200);\n    }\n\n\n    /**\n     * Set the view (center/zoom) all at once\n     * @param center The new center\n     * @param zoom The new zoom level\n     */\n    private setView(center: LatLng, zoom: number) {\n\n        if (null != this.map && null != center && null != zoom) {\n            this.map.setView(center, zoom, this.zoomPanOptions);\n        }\n\n    }\n\n    /**\n     * Set the map zoom level\n     * @param zoom the new zoom level for the map\n     */\n    private setZoom(zoom: number) {\n\n        if (null != this.map && null != zoom) {\n            this.map.setZoom(zoom, this.zoomOptions);\n        }\n\n    }\n\n    /**\n     * Set the center of the map\n     * @param center the center point\n     */\n    private setCenter(center: LatLng) {\n\n        if (null != this.map && null != center) {\n            this.map.panTo(center, this.panOptions);\n        }\n\n    }\n\n    /**\n     * Fit the map to the bounds\n     * @param latLngBounds the boundary to set\n     */\n    private setFitBounds(latLngBounds: LatLngBounds) {\n\n        if (null != this.map && null != latLngBounds) {\n            this.map.fitBounds(latLngBounds, this.fitBoundsOptions);\n        }\n\n    }\n\n    /**\n     * Set the map's max bounds\n     * @param latLngBounds the boundary to set\n     */\n    private setMaxBounds(latLngBounds: LatLngBounds) {\n\n        if (null != this.map && null != latLngBounds) {\n            this.map.setMaxBounds(latLngBounds);\n        }\n\n    }\n\n    /**\n     * Set the map's min zoom\n     * @param number the new min zoom\n     */\n    private setMinZoom(zoom: number) {\n\n        if (null != this.map && null != zoom) {\n            this.map.setMinZoom(zoom);\n        }\n\n    }\n\n    /**\n     * Set the map's min zoom\n     * @param number the new min zoom\n     */\n    private setMaxZoom(zoom: number) {\n\n        if (null != this.map && null != zoom) {\n            this.map.setMaxZoom(zoom);\n        }\n\n    }\n\n}\n","import { LeafletDirective } from './leaflet.directive';\n\nimport { Map } from 'leaflet';\n\nexport class LeafletDirectiveWrapper {\n\n    // Reference to the main leaflet directive\n    protected leafletDirective: LeafletDirective;\n\n    constructor(leafletDirective: LeafletDirective) {\n        this.leafletDirective = leafletDirective;\n    }\n\n    init() {\n        // Nothing for now\n    }\n\n    getMap(): Map {\n        return this.leafletDirective.getMap();\n    }\n\n}\n","import {\n    Directive, EventEmitter, Input, NgZone, OnChanges, OnDestroy, OnInit, Output,\n    SimpleChange\n} from '@angular/core';\n\nimport { Layer, LeafletEvent } from 'leaflet';\n\nimport { LeafletDirective } from '../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';\nimport { LeafletUtil } from '../core/leaflet.util';\n\n\n/**\n * Layer directive\n *\n * This directive is used to directly control a single map layer. The purpose of this directive is to\n * be used as part of a child structural directive of the map element.\n *\n */\n@Directive({\n    selector: '[leafletLayer]',\n    standalone: false\n})\nexport class LeafletLayerDirective\n    implements OnChanges, OnDestroy, OnInit {\n\n    @Input('leafletLayer') layer: Layer;\n\n    // Layer Events\n    @Output('leafletLayerAdd') onAdd = new EventEmitter<LeafletEvent>();\n    @Output('leafletLayerRemove') onRemove = new EventEmitter<LeafletEvent>();\n\n    // Layer Event handlers\n    private onAddLayerHandler: any;\n    private onRemoveLayerHandler: any;\n\n    // Wrapper for the leaflet directive (manages the parent directive)\n    private leafletDirective: LeafletDirectiveWrapper;\n\n    constructor(leafletDirective: LeafletDirective, private zone: NgZone) {\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n    }\n\n    ngOnInit() {\n\n        // Init the map\n        this.leafletDirective.init();\n\n    }\n\n    ngOnDestroy() {\n\n        if (null != this.layer) {\n\n            // Unregister the event handlers\n            this.removeLayerEventListeners(this.layer);\n\n            // Remove the layer from the map\n            this.layer.remove();\n        }\n\n    }\n\n    ngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n        if (changes['layer']) {\n\n            // Update the layer\n            const p: Layer = changes['layer'].previousValue;\n            const n = changes['layer'].currentValue;\n\n            this.zone.runOutsideAngular(() => {\n                if (null != p) {\n                    this.removeLayerEventListeners(p);\n                    p.remove();\n                }\n                if (null != n) {\n                    this.addLayerEventListeners(n);\n                    this.leafletDirective.getMap().addLayer(n);\n                }\n            });\n\n        }\n\n    }\n\n    private addLayerEventListeners(l: Layer) {\n\n        this.onAddLayerHandler = (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onAdd, e);\n        l.on('add', this.onAddLayerHandler);\n\n        this.onRemoveLayerHandler = (e: LeafletEvent) => LeafletUtil.handleEvent(this.zone, this.onRemove, e);\n        l.on('remove', this.onRemoveLayerHandler);\n\n    }\n\n    private removeLayerEventListeners(l: Layer) {\n\n        l.off('add', this.onAddLayerHandler);\n        l.off('remove', this.onRemoveLayerHandler);\n\n    }\n\n}\n","import { Directive, DoCheck, Input, IterableDiffer, IterableDiffers, NgZone, OnDestroy, OnInit } from '@angular/core';\n\nimport { Layer} from 'leaflet';\n\nimport { LeafletDirective } from '../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../core/leaflet.directive.wrapper';\n\n\n/**\n * Layers directive\n *\n * This directive is used to directly control map layers. As changes are made to the input array of\n * layers, the map is synched to the array. As layers are added or removed from the input array, they\n * are also added or removed from the map. The input array is treated as immutable. To detect changes,\n * you must change the array instance.\n *\n * Important Note: The input layers array is assumed to be immutable. This means you need to use an\n * immutable array implementation or create a new copy of your array when you make changes, otherwise\n * this directive won't detect the change. This is by design. It's for performance reasons. Change\n * detection of mutable arrays requires diffing the state of the array on every DoCheck cycle, which\n * is extremely expensive from a time complexity perspective.\n *\n */\n@Directive({\n    selector: '[leafletLayers]',\n    standalone: false\n})\nexport class LeafletLayersDirective\n    implements DoCheck, OnDestroy, OnInit {\n\n    // Array of configured layers\n    layersValue: Layer[];\n\n    // Differ to do change detection on the array\n    layersDiffer: IterableDiffer<Layer>;\n\n    // Set/get the layers\n    @Input('leafletLayers')\n    set layers(v: Layer[]) {\n        this.layersValue = v;\n\n        // Now that we have a differ, do an immediate layer update\n        this.updateLayers();\n    }\n    get layers(): Layer[] {\n        return this.layersValue;\n    }\n\n    // Wrapper for the leaflet directive (manages the parent directive)\n    private leafletDirective: LeafletDirectiveWrapper;\n\n    constructor(leafletDirective: LeafletDirective, private differs: IterableDiffers, private zone: NgZone) {\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n        this.layersDiffer = this.differs.find([]).create<Layer>();\n    }\n\n    ngDoCheck() {\n        this.updateLayers();\n    }\n\n    ngOnInit() {\n\n        // Init the map\n        this.leafletDirective.init();\n\n        // Update layers once the map is ready\n        this.updateLayers();\n\n    }\n\n    ngOnDestroy() {\n        this.layers = [];\n    }\n\n    /**\n     * Update the state of the layers.\n     * We use an iterable differ to synchronize the map layers with the state of the bound layers array.\n     * This is important because it allows us to react to changes to the contents of the array as well\n     * as changes to the actual array instance.\n     */\n    private updateLayers() {\n\n        const map = this.leafletDirective.getMap();\n\n        if (null != map && null != this.layersDiffer) {\n\n            const changes = this.layersDiffer.diff(this.layersValue);\n            if (null != changes) {\n\n                // Run outside angular to ensure layer events don't trigger change detection\n                this.zone.runOutsideAngular(() => {\n\n                    changes.forEachRemovedItem((c) => {\n                        map.removeLayer(c.item);\n                    });\n                    changes.forEachAddedItem((c) => {\n                        map.addLayer(c.item);\n                    });\n\n                });\n\n            }\n\n        }\n\n    }\n\n}\n","export class LeafletControlLayersChanges {\n    layersRemoved: number = 0;\n    layersChanged: number = 0;\n    layersAdded: number = 0;\n\n    changed(): boolean {\n        return !(this.layersRemoved === 0 && this.layersChanged === 0 && this.layersAdded === 0);\n    }\n}\n","import { EventEmitter, KeyValueChanges, NgZone } from '@angular/core';\n\nimport { control, Control, Layer } from 'leaflet';\n\nimport { LeafletControlLayersChanges } from './leaflet-control-layers-changes.model';\n\nexport class LeafletControlLayersWrapper {\n\n    // The layers control object\n    protected layersControl: Control.Layers;\n\n    // Event Emitter for when the control is ready\n    protected layersControlReady: EventEmitter<Control.Layers>;\n\n    constructor(private zone: NgZone, layersControlReady: EventEmitter<Control.Layers>) {\n        this.layersControlReady = layersControlReady;\n    }\n\n    getLayersControl() {\n        return this.layersControl;\n    }\n\n    init(controlConfig: any, controlOptions: any): Control.Layers {\n\n        const baseLayers = controlConfig.baseLayers || {};\n        const overlays = controlConfig.overlays || {};\n\n        // Create the control outside of angular to ensure events don't trigger change detection\n        this.zone.runOutsideAngular(() => {\n            this.layersControl = control.layers(baseLayers, overlays, controlOptions);\n        });\n\n\n        this.layersControlReady.emit(this.layersControl);\n\n        return this.layersControl;\n    }\n\n    applyBaseLayerChanges(changes: KeyValueChanges<string, Layer>): LeafletControlLayersChanges {\n        let results: LeafletControlLayersChanges = new LeafletControlLayersChanges();\n\n        if (null != this.layersControl) {\n            results =  this.applyChanges(changes, this.layersControl.addBaseLayer);\n        }\n\n        return results;\n    }\n\n    applyOverlayChanges(changes: KeyValueChanges<string, Layer>): LeafletControlLayersChanges {\n        let results: LeafletControlLayersChanges = new LeafletControlLayersChanges();\n\n        if (null != this.layersControl) {\n            results =  this.applyChanges(changes, this.layersControl.addOverlay);\n        }\n\n        return results;\n    }\n\n    private applyChanges(changes: KeyValueChanges<string, Layer>, addFn: (layer: Layer, name: string) => void): LeafletControlLayersChanges {\n        const results: LeafletControlLayersChanges = new LeafletControlLayersChanges();\n\n        if (null != changes) {\n\n            // All layer management is outside angular to avoid layer events from triggering change detection\n            this.zone.runOutsideAngular(() => {\n\n                changes.forEachChangedItem((c) => {\n                    this.layersControl.removeLayer(c.previousValue);\n                    addFn.call(this.layersControl, c.currentValue, c.key);\n                    results.layersChanged++;\n                });\n                changes.forEachRemovedItem((c) => {\n                    this.layersControl.removeLayer(c.previousValue);\n                    results.layersRemoved++;\n                });\n                changes.forEachAddedItem((c) => {\n                    addFn.call(this.layersControl, c.currentValue, c.key);\n                    results.layersAdded++;\n                });\n\n            });\n\n        }\n\n        return results;\n    }\n\n}\n","import { Layer } from 'leaflet';\n\nexport class LeafletControlLayersConfig {\n    baseLayers: { [name: string]: Layer } = {};\n    overlays: { [name: string]: Layer } = {};\n}\n","import {\n    Directive, DoCheck, EventEmitter, Input, KeyValueDiffer, KeyValueDiffers, NgZone, OnDestroy, OnInit,\n    Output\n} from '@angular/core';\n\nimport { Control, Layer } from 'leaflet';\n\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from './leaflet-control-layers.wrapper';\nimport { LeafletControlLayersConfig } from './leaflet-control-layers-config.model';\n\n\n/**\n * Layers Control\n *\n * This directive is used to configure the layers control. The input accepts an object with two\n * key-value maps of layer name -> layer. Mutable changes are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the last one it sees will be used.\n */\n@Directive({\n    selector: '[leafletLayersControl]',\n    standalone: false\n})\nexport class LeafletLayersControlDirective\n    implements DoCheck, OnDestroy, OnInit {\n\n    // Control Layers Configuration\n    layersControlConfigValue: LeafletControlLayersConfig;\n\n    baseLayersDiffer: KeyValueDiffer<string, Layer>;\n    overlaysDiffer: KeyValueDiffer<string, Layer>;\n\n    @Input('leafletLayersControl')\n    set layersControlConfig(v: LeafletControlLayersConfig) {\n\n        // Validation/init stuff\n        if (null == v) { v = new LeafletControlLayersConfig(); }\n        if (null == v.baseLayers) { v.baseLayers = {}; }\n        if (null == v.overlays) { v.overlays = {}; }\n\n        // Store the value\n        this.layersControlConfigValue = v;\n\n        // Update the map\n        this.updateLayers();\n\n    }\n    get layersControlConfig(): LeafletControlLayersConfig {\n        return this.layersControlConfigValue;\n    }\n\n    @Input('leafletLayersControlOptions') layersControlOptions: any;\n\n    @Output('leafletLayersControlReady') layersControlReady = new EventEmitter<Control.Layers>();\n\n    private controlLayers: LeafletControlLayersWrapper;\n    private leafletDirective: LeafletDirectiveWrapper;\n\n    constructor(leafletDirective: LeafletDirective, private differs: KeyValueDiffers, private zone: NgZone) {\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n        this.controlLayers = new LeafletControlLayersWrapper(this.zone, this.layersControlReady);\n\n        // Generate differs\n        this.baseLayersDiffer = this.differs.find({}).create<string, Layer>();\n        this.overlaysDiffer = this.differs.find({}).create<string, Layer>();\n\n    }\n\n    ngOnInit() {\n\n        // Init the map\n        this.leafletDirective.init();\n\n        // Set up control outside of angular to avoid change detection when using the control\n        this.zone.runOutsideAngular(() => {\n\n            // Set up all the initial settings\n            this.controlLayers\n                .init({}, this.layersControlOptions)\n                .addTo(this.leafletDirective.getMap());\n\n        });\n\n        this.updateLayers();\n\n    }\n\n    ngOnDestroy() {\n        this.layersControlConfig = { baseLayers: {}, overlays: {} };\n        this.controlLayers.getLayersControl().remove();\n    }\n\n    ngDoCheck() {\n        this.updateLayers();\n    }\n\n    protected updateLayers() {\n\n        const map = this.leafletDirective.getMap();\n        const layersControl = this.controlLayers.getLayersControl();\n\n        if (null != map && null != layersControl) {\n\n            // Run the baselayers differ\n            if (null != this.baseLayersDiffer && null != this.layersControlConfigValue.baseLayers) {\n                const changes = this.baseLayersDiffer.diff(this.layersControlConfigValue.baseLayers);\n                this.controlLayers.applyBaseLayerChanges(changes);\n            }\n\n            // Run the overlays differ\n            if (null != this.overlaysDiffer && null != this.layersControlConfigValue.overlays) {\n                const changes = this.overlaysDiffer.diff(this.layersControlConfigValue.overlays);\n                this.controlLayers.applyOverlayChanges(changes);\n            }\n\n        }\n\n    }\n\n}\n","import {\n    Directive, DoCheck, EventEmitter, Input, KeyValueDiffer, KeyValueDiffers, NgZone, OnDestroy,\n    OnInit, Output\n} from '@angular/core';\n\nimport { Control, Layer } from 'leaflet';\n\nimport { LeafletUtil } from '../../core/leaflet.util';\nimport { LeafletDirective } from '../../core/leaflet.directive';\nimport { LeafletDirectiveWrapper } from '../../core/leaflet.directive.wrapper';\nimport { LeafletControlLayersWrapper } from '../control/leaflet-control-layers.wrapper';\n\n\n/**\n * Baselayers directive\n *\n * This directive is provided as a convenient way to add baselayers to the map. The input accepts\n * a key-value map of layer name -> layer. Mutable changed are detected. On changes, a differ is\n * used to determine what changed so that layers are appropriately added or removed. This directive\n * will also add the layers control so users can switch between available base layers.\n *\n * To specify which layer to show as the 'active' baselayer, you will want to add it to the map\n * using the layers directive. Otherwise, the plugin will use the last one it sees.\n */\n@Directive({\n    selector: '[leafletBaseLayers]',\n    standalone: false\n})\nexport class LeafletBaseLayersDirective\n    implements DoCheck, OnDestroy, OnInit {\n\n    // Base Layers\n    baseLayersValue: { [name: string]: Layer };\n\n    // Base Layers Map Differ\n    baseLayersDiffer: KeyValueDiffer<string, Layer>;\n\n    // Set/get baseLayers\n    @Input('leafletBaseLayers')\n    set baseLayers(v: { [name: string]: Layer }) {\n        this.baseLayersValue = v;\n\n        this.updateBaseLayers();\n    }\n    get baseLayers(): { [name: string]: Layer } {\n        return this.baseLayersValue;\n    }\n\n    // Control Options\n    @Input('leafletLayersControlOptions') layersControlOptions: Control.LayersOptions;\n\n    // Output for once the layers control is ready\n    @Output('leafletLayersControlReady') layersControlReady = new EventEmitter<Control.Layers>();\n\n    // Active Base Layer\n    private baseLayer: Layer;\n\n    private leafletDirective: LeafletDirectiveWrapper;\n    private controlLayers: LeafletControlLayersWrapper;\n\n    constructor(leafletDirective: LeafletDirective, private differs: KeyValueDiffers, private zone: NgZone) {\n        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n        this.controlLayers = new LeafletControlLayersWrapper(this.zone, this.layersControlReady);\n        this.baseLayersDiffer = this.differs.find({}).create<string, Layer>();\n    }\n\n    ngOnDestroy() {\n        this.baseLayers = {};\n        if (null != this.controlLayers.getLayersControl()) {\n            this.controlLayers.getLayersControl().remove();\n        }\n    }\n\n    ngOnInit() {\n\n        // Init the map\n        this.leafletDirective.init();\n\n        // Create the control outside angular to prevent events from triggering chnage detection\n        this.zone.runOutsideAngular(() => {\n\n            // Initially configure the controlLayers\n            this.controlLayers\n                .init({}, this.layersControlOptions)\n                .addTo(this.leafletDirective.getMap());\n\n        });\n\n        this.updateBaseLayers();\n\n    }\n\n    ngDoCheck() {\n        this.updateBaseLayers();\n    }\n\n    protected updateBaseLayers() {\n\n        const map = this.leafletDirective.getMap();\n        const layersControl = this.controlLayers.getLayersControl();\n\n        if (null != map && null != layersControl && null != this.baseLayersDiffer) {\n            const changes = this.baseLayersDiffer.diff(this.baseLayersValue);\n            const results = this.controlLayers.applyBaseLayerChanges(changes);\n\n            if (results.changed()) {\n                this.syncBaseLayer();\n            }\n        }\n\n    }\n\n    /**\n     * Check the current base layer and change it to the new one if necessary\n     */\n    protected syncBaseLayer() {\n\n        const map = this.leafletDirective.getMap();\n        const layers = LeafletUtil.mapToArray(this.baseLayers);\n        let foundLayer: Layer;\n\n        // Search all the layers in the map to see if we can find them in the baselayer array\n        map.eachLayer((l: Layer) => {\n            foundLayer = layers.find((bl) => (l === bl));\n        });\n\n        // Did we find the layer?\n        if (null != foundLayer) {\n            // Yes - set the baselayer to the one we found\n            this.baseLayer = foundLayer;\n        }\n        else {\n            // No - set the baselayer to the first in the array and add it to the map\n            if (layers.length > 0) {\n                this.baseLayer = layers[0];\n\n                // Add layers outside of angular to prevent events from triggering change detection\n                this.zone.runOutsideAngular(() => {\n                    this.baseLayer.addTo(map);\n                });\n            }\n        }\n\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { LeafletDirective } from './core/leaflet.directive';\nimport { LeafletLayerDirective } from './layers/leaflet-layer.directive';\nimport { LeafletLayersDirective } from './layers/leaflet-layers.directive';\nimport { LeafletLayersControlDirective } from './layers/control/leaflet-control-layers.directive';\nimport { LeafletBaseLayersDirective } from './layers/base/leaflet-baselayers.directive';\n\n@NgModule({\n    exports: [\n        LeafletDirective,\n        LeafletLayerDirective,\n        LeafletLayersDirective,\n        LeafletLayersControlDirective,\n        LeafletBaseLayersDirective\n    ],\n    declarations: [\n        LeafletDirective,\n        LeafletLayerDirective,\n        LeafletLayersDirective,\n        LeafletLayersControlDirective,\n        LeafletBaseLayersDirective\n    ]\n})\nexport class LeafletModule {\n\n}\n","import { tileLayer, TileLayer } from 'leaflet';\n\nexport class LeafletTileLayerDefinition {\n\n    constructor(\n        public type: string,\n        public url: string,\n        public options: any) { }\n\n\n    /**\n     * Creates a TileLayer from the provided definition. This is a convenience function\n     * to help with generating layers from objects.\n     *\n     * @param layerDef The layer to create\n     * @returns {TileLayer} The TileLayer that has been created\n     */\n    static createTileLayer(layerDef: LeafletTileLayerDefinition): TileLayer {\n        let layer: TileLayer;\n\n        switch (layerDef.type) {\n            case 'xyz':\n                layer = tileLayer(layerDef.url,  layerDef.options);\n                break;\n            case 'wms':\n            default:\n                layer = tileLayer.wms(layerDef.url,  layerDef.options);\n                break;\n        }\n\n        return layer;\n    }\n\n    /**\n     * Creates a TileLayer for each key in the incoming map. This is a convenience function\n     * for generating an associative array of layers from an associative array of objects\n     *\n     * @param layerDefs A map of key to tile layer definition\n     * @returns {{[p: string]: TileLayer}} A new map of key to TileLayer\n     */\n    static createTileLayers(layerDefs: { [ key: string ]: LeafletTileLayerDefinition }): { [ key: string ]: TileLayer } {\n        const layers: { [ key: string ]: TileLayer } = {};\n\n        for (const k in layerDefs) {\n            if (layerDefs.hasOwnProperty(k)) {\n                layers[k] = (LeafletTileLayerDefinition.createTileLayer(layerDefs[k]));\n            }\n        }\n\n        return layers;\n    }\n\n    /**\n     * Create a Tile Layer from the current state of this object\n     *\n     * @returns {TileLayer} A new TileLayer\n     */\n    createTileLayer(): TileLayer {\n        return LeafletTileLayerDefinition.createTileLayer(this);\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.LeafletDirective"],"mappings":"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"}