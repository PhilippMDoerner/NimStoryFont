export declare const COMPONENT_OR_DIRECTIVE_CLASS_DECORATOR = "ClassDeclaration > Decorator[expression.callee.name=/^(Component|Directive)$/]";
export declare const COMPONENT_CLASS_DECORATOR = "ClassDeclaration > Decorator[expression.callee.name=\"Component\"]";
export declare const DIRECTIVE_CLASS_DECORATOR = "ClassDeclaration > Decorator[expression.callee.name=\"Directive\"]";
export declare const PIPE_CLASS_DECORATOR = "ClassDeclaration > Decorator[expression.callee.name=\"Pipe\"]";
export declare const INJECTABLE_CLASS_DECORATOR = "ClassDeclaration > Decorator[expression.callee.name=\"Injectable\"]";
export declare const MODULE_CLASS_DECORATOR = "ClassDeclaration > Decorator[expression.callee.name=\"NgModule\"]";
export declare const INPUT_DECORATOR = "Decorator[expression.callee.name=\"Input\"]";
export declare const OUTPUT_DECORATOR = "Decorator[expression.callee.name=\"Output\"]";
export declare const LITERAL_OR_TEMPLATE_ELEMENT = ":matches(Literal, TemplateElement)";
export declare const ALIAS_PROPERTY_VALUE = "ObjectExpression > Property[key.name='alias'] :matches(Literal, TemplateElement)";
export declare function decoratorDefinition(decoratorName: RegExp): string;
export declare function decoratorDefinition<TDecoratorName extends string>(decoratorName: TDecoratorName): `ClassDeclaration:has(Decorator[expression.callee.name=${TDecoratorName}])`;
export declare function metadataProperty(key: RegExp): string;
export declare function metadataProperty<TKey extends string>(key: TKey): `Property:matches([key.name=${TKey}][computed=false], [key.value=${TKey}], [key.quasis.0.value.raw=${TKey}])`;
export declare function methodDefinition(key: RegExp): string;
export declare function methodDefinition<TKey extends string>(key: TKey): `MethodDefinition:matches([key.name=${TKey}][computed=false], [key.value=${TKey}], [key.quasis.0.value.raw=${TKey}])`;
export declare const COMPONENT_SELECTOR_LITERAL: string;
export declare const DIRECTIVE_SELECTOR_LITERAL: string;
export declare const COMPONENT_OR_DIRECTIVE_SELECTOR_LITERAL: string;
export declare const INPUTS_METADATA_PROPERTY_LITERAL: string;
export declare const INPUT_ALIAS: string;
export declare const INPUT_PROPERTY_OR_SETTER = ":matches(PropertyDefinition, MethodDefinition[kind='set'])[computed=false]:has(Decorator[expression.callee.name=\"Input\"]) > :matches(Identifier, Literal)";
export declare const OUTPUTS_METADATA_PROPERTY_LITERAL: string;
export declare const OUTPUT_ALIAS: string;
export declare const OUTPUT_PROPERTY_OR_GETTER: string;
//# sourceMappingURL=selectors.d.ts.map