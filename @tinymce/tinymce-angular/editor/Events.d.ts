import { EventEmitter } from '@angular/core';
import { Editor as TinyMCEEditor } from 'tinymce';
import * as i0 from "@angular/core";
export interface EventObj<T> {
    event: T;
    editor: TinyMCEEditor;
}
export declare class Events {
    onBeforePaste: EventEmitter<EventObj<ClipboardEvent>>;
    onBlur: EventEmitter<EventObj<FocusEvent>>;
    onClick: EventEmitter<EventObj<MouseEvent>>;
    onContextMenu: EventEmitter<EventObj<MouseEvent>>;
    onCopy: EventEmitter<EventObj<ClipboardEvent>>;
    onCut: EventEmitter<EventObj<ClipboardEvent>>;
    onDblclick: EventEmitter<EventObj<MouseEvent>>;
    onDrag: EventEmitter<EventObj<DragEvent>>;
    onDragDrop: EventEmitter<EventObj<DragEvent>>;
    onDragEnd: EventEmitter<EventObj<DragEvent>>;
    onDragGesture: EventEmitter<EventObj<DragEvent>>;
    onDragOver: EventEmitter<EventObj<DragEvent>>;
    onDrop: EventEmitter<EventObj<DragEvent>>;
    onFocus: EventEmitter<EventObj<FocusEvent>>;
    onFocusIn: EventEmitter<EventObj<FocusEvent>>;
    onFocusOut: EventEmitter<EventObj<FocusEvent>>;
    onKeyDown: EventEmitter<EventObj<KeyboardEvent>>;
    onKeyPress: EventEmitter<EventObj<KeyboardEvent>>;
    onKeyUp: EventEmitter<EventObj<KeyboardEvent>>;
    onMouseDown: EventEmitter<EventObj<MouseEvent>>;
    onMouseEnter: EventEmitter<EventObj<MouseEvent>>;
    onMouseLeave: EventEmitter<EventObj<MouseEvent>>;
    onMouseMove: EventEmitter<EventObj<MouseEvent>>;
    onMouseOut: EventEmitter<EventObj<MouseEvent>>;
    onMouseOver: EventEmitter<EventObj<MouseEvent>>;
    onMouseUp: EventEmitter<EventObj<MouseEvent>>;
    onPaste: EventEmitter<EventObj<ClipboardEvent>>;
    onSelectionChange: EventEmitter<EventObj<Event>>;
    onActivate: EventEmitter<EventObj<any>>;
    onAddUndo: EventEmitter<EventObj<any>>;
    onBeforeAddUndo: EventEmitter<EventObj<any>>;
    onBeforeExecCommand: EventEmitter<EventObj<any>>;
    onBeforeGetContent: EventEmitter<EventObj<any>>;
    onBeforeRenderUI: EventEmitter<EventObj<any>>;
    onBeforeSetContent: EventEmitter<EventObj<any>>;
    onChange: EventEmitter<EventObj<any>>;
    onClearUndos: EventEmitter<EventObj<any>>;
    onDeactivate: EventEmitter<EventObj<any>>;
    onDirty: EventEmitter<EventObj<any>>;
    onExecCommand: EventEmitter<EventObj<any>>;
    onGetContent: EventEmitter<EventObj<any>>;
    onHide: EventEmitter<EventObj<any>>;
    onInit: EventEmitter<EventObj<any>>;
    onInitNgModel: EventEmitter<EventObj<any>>;
    onLoadContent: EventEmitter<EventObj<any>>;
    onNodeChange: EventEmitter<EventObj<any>>;
    onPostProcess: EventEmitter<EventObj<any>>;
    onPostRender: EventEmitter<EventObj<any>>;
    onPreInit: EventEmitter<EventObj<any>>;
    onPreProcess: EventEmitter<EventObj<any>>;
    onProgressState: EventEmitter<EventObj<any>>;
    onRedo: EventEmitter<EventObj<any>>;
    onRemove: EventEmitter<EventObj<any>>;
    onReset: EventEmitter<EventObj<any>>;
    onResizeEditor: EventEmitter<EventObj<any>>;
    onSaveContent: EventEmitter<EventObj<any>>;
    onSetAttrib: EventEmitter<EventObj<any>>;
    onObjectResizeStart: EventEmitter<EventObj<any>>;
    onObjectResized: EventEmitter<EventObj<any>>;
    onObjectSelected: EventEmitter<EventObj<any>>;
    onSetContent: EventEmitter<EventObj<any>>;
    onShow: EventEmitter<EventObj<any>>;
    onSubmit: EventEmitter<EventObj<any>>;
    onUndo: EventEmitter<EventObj<any>>;
    onVisualAid: EventEmitter<EventObj<any>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<Events, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<Events, never, never, {}, { "onBeforePaste": "onBeforePaste"; "onBlur": "onBlur"; "onClick": "onClick"; "onContextMenu": "onContextMenu"; "onCopy": "onCopy"; "onCut": "onCut"; "onDblclick": "onDblclick"; "onDrag": "onDrag"; "onDragDrop": "onDragDrop"; "onDragEnd": "onDragEnd"; "onDragGesture": "onDragGesture"; "onDragOver": "onDragOver"; "onDrop": "onDrop"; "onFocus": "onFocus"; "onFocusIn": "onFocusIn"; "onFocusOut": "onFocusOut"; "onKeyDown": "onKeyDown"; "onKeyPress": "onKeyPress"; "onKeyUp": "onKeyUp"; "onMouseDown": "onMouseDown"; "onMouseEnter": "onMouseEnter"; "onMouseLeave": "onMouseLeave"; "onMouseMove": "onMouseMove"; "onMouseOut": "onMouseOut"; "onMouseOver": "onMouseOver"; "onMouseUp": "onMouseUp"; "onPaste": "onPaste"; "onSelectionChange": "onSelectionChange"; "onActivate": "onActivate"; "onAddUndo": "onAddUndo"; "onBeforeAddUndo": "onBeforeAddUndo"; "onBeforeExecCommand": "onBeforeExecCommand"; "onBeforeGetContent": "onBeforeGetContent"; "onBeforeRenderUI": "onBeforeRenderUI"; "onBeforeSetContent": "onBeforeSetContent"; "onChange": "onChange"; "onClearUndos": "onClearUndos"; "onDeactivate": "onDeactivate"; "onDirty": "onDirty"; "onExecCommand": "onExecCommand"; "onGetContent": "onGetContent"; "onHide": "onHide"; "onInit": "onInit"; "onInitNgModel": "onInitNgModel"; "onLoadContent": "onLoadContent"; "onNodeChange": "onNodeChange"; "onPostProcess": "onPostProcess"; "onPostRender": "onPostRender"; "onPreInit": "onPreInit"; "onPreProcess": "onPreProcess"; "onProgressState": "onProgressState"; "onRedo": "onRedo"; "onRemove": "onRemove"; "onReset": "onReset"; "onResizeEditor": "onResizeEditor"; "onSaveContent": "onSaveContent"; "onSetAttrib": "onSetAttrib"; "onObjectResizeStart": "onObjectResizeStart"; "onObjectResized": "onObjectResized"; "onObjectSelected": "onObjectSelected"; "onSetContent": "onSetContent"; "onShow": "onShow"; "onSubmit": "onSubmit"; "onUndo": "onUndo"; "onVisualAid": "onVisualAid"; }, never, never, false>;
}
export declare const validEvents: (keyof Events)[];
