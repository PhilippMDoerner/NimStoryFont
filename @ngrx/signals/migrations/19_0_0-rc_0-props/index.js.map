{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/signals/migrations/19_0_0-rc_0-props/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  chain,\n  Rule,\n  SchematicContext,\n  Tree,\n} from '@angular-devkit/schematics';\nimport {\n  Change,\n  commitChanges,\n  createReplaceChange,\n  visitTSSourceFiles,\n} from '../../schematics-core';\nimport {\n  visitCallExpression,\n  visitImportDeclaration,\n  visitImportSpecifier,\n  visitTypeLiteral,\n  visitTypeReference,\n} from '../../schematics-core/utility/visitors';\nimport * as ts from 'typescript';\n\nfunction migratedToEntityProps(sourceFile: ts.SourceFile) {\n  const changes: Change[] = [];\n  visitImportDeclaration(sourceFile, (importDeclaration, moduleName) => {\n    if (moduleName !== '@ngrx/signals/entities') {\n      return;\n    }\n\n    visitImportSpecifier(importDeclaration, (importSpecifier) => {\n      if (importSpecifier.name.getText() === 'EntityComputed') {\n        changes.push(\n          createReplaceChange(\n            sourceFile,\n            importSpecifier,\n            importSpecifier.getText(),\n            'EntityProps'\n          )\n        );\n\n        visitTypeReference(sourceFile, (type) => {\n          if (type.typeName.getText() === 'EntityComputed') {\n            changes.push(\n              createReplaceChange(\n                sourceFile,\n                type,\n                type.typeName.getText(),\n                'EntityProps'\n              )\n            );\n          }\n        });\n      }\n\n      if (importSpecifier.name.getText() === 'NamedEntityComputed') {\n        changes.push(\n          createReplaceChange(\n            sourceFile,\n            importSpecifier,\n            importSpecifier.getText(),\n            'NamedEntityProps'\n          )\n        );\n\n        visitTypeReference(sourceFile, (typeReference) => {\n          if (typeReference.typeName.getText() === 'NamedEntityComputed') {\n            changes.push(\n              createReplaceChange(\n                sourceFile,\n                typeReference.typeName,\n                typeReference.typeName.getText(),\n                'NamedEntityProps'\n              )\n            );\n          }\n        });\n      }\n    });\n  });\n\n  return changes;\n}\n\nfunction migrateToPropsInSignalStoreFeatureType(\n  sourceFile: ts.SourceFile\n): Change[] {\n  const changes: Change[] = [];\n  visitTypeReference(sourceFile, (typeReference) => {\n    if (typeReference.typeName.getText() !== 'SignalStoreFeature') {\n      return;\n    }\n\n    visitTypeLiteral(typeReference, (typeLiteral) => {\n      const typeLiteralChildren = typeLiteral.members;\n      for (const propertySignature of typeLiteralChildren) {\n        if (ts.isPropertySignature(propertySignature)) {\n          if (propertySignature.name.getText() === 'computed') {\n            changes.push(\n              createReplaceChange(\n                sourceFile,\n                propertySignature.name,\n                'computed',\n                'props'\n              )\n            );\n          }\n        }\n      }\n    });\n  });\n\n  return changes;\n}\n\nfunction migrateToPropsInSignalStoreFeatureWithObjectLiteral(\n  objectLiteral: ts.ObjectLiteralExpression,\n  sourceFile: ts.SourceFile\n): Change[] {\n  const computedKey = objectLiteral.properties\n    .filter(ts.isPropertyAssignment)\n    .find((property) => property.name.getText() === 'computed');\n  if (computedKey) {\n    return [createReplaceChange(sourceFile, computedKey, 'computed', 'props')];\n  }\n\n  return [];\n}\n\nfunction migrateToPropsInSignalStoreFeatureWithCallExpression(\n  callExpression: ts.CallExpression,\n  sourceFile: ts.SourceFile\n): Change[] {\n  if (callExpression.expression.getText() === 'type') {\n    const typeArgument = callExpression.typeArguments?.at(0);\n\n    if (typeArgument && ts.isTypeLiteralNode(typeArgument)) {\n      const computedKey = typeArgument.members\n        .filter(ts.isPropertySignature)\n        .find(\n          (propertySignature) => propertySignature.name.getText() === 'computed'\n        );\n\n      if (computedKey) {\n        return [\n          createReplaceChange(sourceFile, computedKey, 'computed', 'props'),\n        ];\n      }\n    }\n  }\n\n  return [];\n}\n\nfunction migrateToPropsInSignalStoreFeatureFunction(\n  sourceFile: ts.SourceFile\n): Change[] {\n  const changes: Change[] = [];\n  visitCallExpression(sourceFile, (callExpression) => {\n    if (callExpression.expression.getText() !== 'signalStoreFeature') {\n      return;\n    }\n\n    const objectLiteralOrCallExpression = callExpression.arguments[0];\n    if (!objectLiteralOrCallExpression) {\n      return;\n    }\n\n    if (ts.isObjectLiteralExpression(objectLiteralOrCallExpression)) {\n      changes.push(\n        ...migrateToPropsInSignalStoreFeatureWithObjectLiteral(\n          objectLiteralOrCallExpression,\n          sourceFile\n        )\n      );\n    } else if (ts.isCallExpression(objectLiteralOrCallExpression)) {\n      changes.push(\n        ...migrateToPropsInSignalStoreFeatureWithCallExpression(\n          objectLiteralOrCallExpression,\n          sourceFile\n        )\n      );\n    }\n  });\n\n  return changes;\n}\n\nexport function migrate(): Rule {\n  return (tree: Tree, ctx: SchematicContext) => {\n    visitTSSourceFiles(tree, (sourceFile) => {\n      const entityPropsChanges = migratedToEntityProps(sourceFile);\n      const propsInSignalStoreFeatureTypeChanges =\n        migrateToPropsInSignalStoreFeatureType(sourceFile);\n      const propsInSignalStoreFeatureFunctionChanges =\n        migrateToPropsInSignalStoreFeatureFunction(sourceFile);\n      const changes = [\n        ...entityPropsChanges,\n        ...propsInSignalStoreFeatureTypeChanges,\n        ...propsInSignalStoreFeatureFunctionChanges,\n      ];\n\n      commitChanges(tree, sourceFile.fileName, changes);\n\n      if (entityPropsChanges.length) {\n        ctx.logger.info(\n          `[@ngrx/signals] Renamed '(Named)EntityComputed' to '(Named)EntityProps' in ${sourceFile.fileName}`\n        );\n      }\n      if (propsInSignalStoreFeatureTypeChanges.length) {\n        ctx.logger.info(\n          `[@ngrx/signals] Renamed 'computed' to 'props' in SignalStoreFeature<> in ${sourceFile.fileName}`\n        );\n      }\n      if (propsInSignalStoreFeatureFunctionChanges.length) {\n        ctx.logger.info(\n          `[@ngrx/signals] Renamed 'computed' to 'props' in signalStoreFeature() in ${sourceFile.fileName}`\n        );\n      }\n    });\n  };\n}\n\nexport default function (): Rule {\n  return chain([migrate()]);\n}\n"]}