{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/signals/migrations/18_0_0-rc_3-protected-state/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Change,\n  createReplaceChange,\n  visitTSSourceFiles,\n} from '../../schematics-core';\nimport { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';\nimport * as ts from 'typescript';\nimport { commitChanges } from '../../schematics-core';\nimport { visitImportDeclaration } from '../../schematics-core/utility/visitors';\n\nexport default function migrateWritableStateSource(): Rule {\n  return (tree: Tree, ctx: SchematicContext) => {\n    visitTSSourceFiles(tree, (sourceFile) => {\n      const signalStoreImportedName = findImportedName(sourceFile);\n      if (!signalStoreImportedName) {\n        return;\n      }\n\n      const changes: Change[] = [];\n      visitCallExpression(sourceFile, signalStoreImportedName, (node) => {\n        if (node.arguments.length > 0) {\n          if (ts.isObjectLiteralExpression(node.arguments[0])) {\n            // signalStore({ providedIn: 'root' })\n            const providedInProperty = node.arguments[0].properties[0];\n\n            if (\n              ts.isPropertyAssignment(providedInProperty) &&\n              ts.isIdentifier(providedInProperty.name) &&\n              providedInProperty.name.text === 'providedIn'\n            ) {\n              changes.push(\n                createReplaceChange(\n                  sourceFile,\n                  providedInProperty,\n                  providedInProperty.getText(),\n                  `${providedInProperty.getText()}, protectedState: false`\n                )\n              );\n            }\n          } else {\n            // signalStore(withState({}))\n            const firstFeature = node.arguments[0];\n            changes.push(\n              createReplaceChange(\n                sourceFile,\n                firstFeature,\n                firstFeature.getText(),\n                `{ protectedState: false }, ${firstFeature.getText()}`\n              )\n            );\n          }\n        } else {\n          // signalStore()\n          changes.push(\n            createReplaceChange(\n              sourceFile,\n              node,\n              node.getText(),\n              `${signalStoreImportedName}({ protectedState: false })`\n            )\n          );\n        }\n      });\n\n      if (changes.length) {\n        commitChanges(tree, sourceFile.fileName, changes);\n        ctx.logger.info(\n          `[@ngrx/signals] Disable protected state in ${sourceFile.fileName}`\n        );\n      }\n    });\n  };\n}\n\nfunction visitCallExpression(\n  node: ts.Node,\n  name: string,\n  callback: (callExpression: ts.CallExpression) => void\n) {\n  if (\n    ts.isCallExpression(node) &&\n    ts.isIdentifier(node.expression) &&\n    node.expression.text === name\n  ) {\n    callback(node);\n  }\n\n  ts.forEachChild(node, (child) => {\n    visitCallExpression(child, name, callback);\n  });\n}\n\nfunction findImportedName(source: ts.SourceFile) {\n  let importedName = '';\n  visitImportDeclaration(source, (importDeclaration) => {\n    if (importDeclaration.moduleSpecifier.getText().includes('@ngrx/signals')) {\n      if (importedName) {\n        return;\n      }\n\n      const namedBindings = importDeclaration.importClause?.namedBindings;\n      if (namedBindings && ts.isNamedImports(namedBindings)) {\n        const foundImportedName = namedBindings.elements\n          .map((importSpecifier) => {\n            if (\n              importSpecifier.propertyName &&\n              importSpecifier.propertyName.text === 'signalStore'\n            ) {\n              return importSpecifier.name.text;\n            } else if (importSpecifier.name.text === 'signalStore') {\n              return 'signalStore';\n            }\n            return undefined;\n          })\n          .find(Boolean);\n\n        if (foundImportedName) {\n          importedName = foundImportedName;\n          return;\n        }\n      }\n    }\n  });\n\n  return importedName;\n}\n"]}