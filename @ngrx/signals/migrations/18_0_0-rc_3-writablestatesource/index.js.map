{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/signals/migrations/18_0_0-rc_3-writablestatesource/index.ts"],"names":[],"mappings":";;AAeA,gEAgDC;AAaD,4BAEC;AA9ED,+BAAiC;AACjC,yDAKoC;AACpC,yDAK+B;AAG/B,SAAgB,0BAA0B;IACxC,OAAO,UAAC,IAAU,EAAE,GAAqB;QACvC,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,GAAG,CAAC,MAAM,CAAC,IAAI,CACb,kEAAkE,CACnE,CAAC;QAEF,IAAA,oCAAkB,EAAC,IAAI,EAAE,UAAC,UAAU;YAClC,IAAM,OAAO,GAAG,IAAA,+BAAa,EAC3B,UAAU,EACV,UAAU,CAAC,QAAgB,EAC3B,eAAe,EACf,aAAa,EACb,qBAAqB,CACtB,CAAC;YAEF,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;gBACnB,gBAAgB,CAAC,UAAU,EAAE,UAAC,IAAI;oBAChC,IACE,IAAI,CAAC,OAAO,EAAE,KAAK,aAAa;wBAChC,CAAC,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,EAClC,CAAC;wBACD,OAAO,CAAC,IAAI,CACV,IAAA,qCAAmB,EACjB,UAAU,EACV,IAAI,EACJ,aAAa,EACb,qBAAqB,CACtB,CACF,CAAC;wBACF,aAAa,EAAE,CAAC;oBAClB,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YAED,IAAA,+BAAa,EAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,IAAI,aAAa,EAAE,CAAC;YAClB,GAAG,CAAC,MAAM,CAAC,IAAI,CACb,kCAA2B,aAAa,4DAAyD,CAClG,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,MAAM,CAAC,IAAI,CACb,4EAA4E,CAC7E,CAAC;QACJ,CAAC;IACH,CAAC,CAAC;AACJ,CAAC;AAED,SAAS,gBAAgB,CACvB,IAAa,EACb,OAAsC;IAEtC,IAAI,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC;QAC1B,OAAO,CAAC,IAAI,CAAC,CAAC;IAChB,CAAC;IAED,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,UAAC,SAAS,IAAK,OAAA,gBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC,EAApC,CAAoC,CAAC,CAAC;AAC7E,CAAC;AAED;IACE,OAAO,IAAA,kBAAK,EAAC,CAAC,0BAA0B,EAAE,CAAC,CAAC,CAAC;AAC/C,CAAC","sourcesContent":["import * as ts from 'typescript';\nimport {\n  Tree,\n  Rule,\n  chain,\n  SchematicContext,\n} from '@angular-devkit/schematics';\nimport {\n  commitChanges,\n  createReplaceChange,\n  replaceImport,\n  visitTSSourceFiles,\n} from '../../schematics-core';\nimport { Path } from '@angular-devkit/core';\n\nexport function migrateWritableStateSource(): Rule {\n  return (tree: Tree, ctx: SchematicContext) => {\n    let updateCounter = 0;\n    ctx.logger.info(\n      `[@ngrx/signals] Migrating 'StateSignal' to 'WritableStateSource'`\n    );\n\n    visitTSSourceFiles(tree, (sourceFile) => {\n      const changes = replaceImport(\n        sourceFile,\n        sourceFile.fileName as Path,\n        '@ngrx/signals',\n        'StateSignal',\n        'WritableStateSource'\n      );\n\n      if (changes.length) {\n        visitIdentifiers(sourceFile, (node) => {\n          if (\n            node.getText() === 'StateSignal' &&\n            !ts.isImportSpecifier(node.parent)\n          ) {\n            changes.push(\n              createReplaceChange(\n                sourceFile,\n                node,\n                'StateSignal',\n                'WritableStateSource'\n              )\n            );\n            updateCounter++;\n          }\n        });\n      }\n\n      commitChanges(tree, sourceFile.fileName, changes);\n    });\n\n    if (updateCounter) {\n      ctx.logger.info(\n        `[@ngrx/signals] Updated ${updateCounter} references from 'StateSignal' to 'WritableStateSource'`\n      );\n    } else {\n      ctx.logger.info(\n        `[@ngrx/signals] No 'StateSignal' refences found to, skipping the migration`\n      );\n    }\n  };\n}\n\nfunction visitIdentifiers(\n  node: ts.Node,\n  visitor: (node: ts.Identifier) => void\n) {\n  if (ts.isIdentifier(node)) {\n    visitor(node);\n  }\n\n  ts.forEachChild(node, (childNode) => visitIdentifiers(childNode, visitor));\n}\n\nexport default function (): Rule {\n  return chain([migrateWritableStateSource()]);\n}\n"]}